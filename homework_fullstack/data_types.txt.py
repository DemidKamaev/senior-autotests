# Правила о неизменяемых типах данных (например, str, int, tuple)

# тип данных str
"""При попытке изменить символ в строке мы получим ошибку. При изменении строки нам нужно создать новую строку"""

s = "Ты умеешь(ете) подтягиваться на турнике?"
# s[0:1] = "Вы"
# print(s)  # TypeError: 'str' object does not support item assignment

new_s = s.replace("Ты", "Вы")
print(new_s)


# тип данных int
"""Целочисленные объекты также являются неизмененяемыми в Python. При изменении переменной создается новый объект. 
Т.е. мы имеем новую ячейку с памятью"""

a = 10
b = a  # b теперь ссылается на тот же объект, что и a
a += 1
print(a)  # 11
print(b)  # 10  (b остается прежним)

# тип данных tuple
"""Кортежи представляют собой упорядочные коллекции элементов и являются неизменяемыми.
После создания кортежа мы не может изменить, добавить или удалить элементы в нем"""

t = (1, 2, 3)
# t[0] = 4
# t.append(5)  # AttributeError: 'tuple' object has no attribute 'append'
print(t)  # TypeError: 'tuple' object does not support item assignment

# тип данных float
"""Как и целые числа, вещественные числа являются неизменяемыми. 
Это означает, что любое изменение вещественного числа фактически создает новый объект, 
который занимает отдельное место в памяти"""

x = 5.5
y = x  # y ссылается на тот же созданный объект(ячейку памяти)
x += 1.0  # создается новый объект с новым значением
print(x)  # 6.5
print(y)  # 5.5 ссылается на предыдущую ячейку памяти, где записано 5.5


# тип данных boolean
"""Логические значения также являются неизменяемыми. 
Это означает, что мы не можем изменить значение логической переменной после ее создания"""

is_active = True
# Попытка изменить логическое значение вызовет создание нового объекта
is_active = False  # Здесь мы создаем новый объект
print(is_active)  # Значение берет из новой ячейку памяти = False

# Логические значения часто используются в условных выражениях и для управления потоками выполнения в программах

if is_active:
    print("Активно")
else:
    print("Не активно")

